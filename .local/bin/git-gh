#!/bin/sh -e

Force="--no-force"
# Should only be read via __remote.
Remote=

alias __shift='test "${#}" -gt 0 && shift'

__error() {
  echo "error: ${*}" > /dev/stderr
  return 1
}

# Usage: __remote [ DIR ]
#
# Get the remote to operate on, if DIR is given, do so from that directory
# instead of $PWD. Order is: --remote flag, gh.defaultRemote config, 'origin'.
__remote() {
  _remote_dir="${1:-${PWD}}"
  if [ -n "${Remote}" ]; then
    echo "${Remote}"
  else
    git -C "${_remote_dir}" config get --default origin gh.defaultRemote
  fi
}

# Usage: __remote_url [ DIR ]
#
# Resolve remote URL for the current remote, if DIR is given, do so from that
# directory instead $PWD.
__remote_url() {
  _remote_url_dir="${1:-${PWD}}"
  _remote_url="$(git -C "${_remote_url_dir}" remote get-url "$(__remote "${_remote_url_dir}")")"
  _remote_url="${_remote_url%.git}"

  # mangle SSH URLs
  if [ "${_remote_url#git@}" != "${_remote_url}" ]; then
    _remote_url="$(echo "${_remote_url}" | sed -E -e 's|:|/|' -e 's|^git@|https://|')"
  fi

  echo "${_remote_url}"
}

# Usage: __open [ TYPE [ ... ] ]
__open() {
  _open_print=
  while :; do
    case "${1}" in
      -p | --print ) _open_print="true" ;;
      -*           ) __error "unknown flag '${1}'" ;;
      *            ) break ;;
    esac
    __shift
  done

  _open_type="${1:-repo}"
  __shift

  _open_url=
  case "${_open_type}" in
    r* ) _open_url="$(__remote_url)" ;;
    f* ) _open_url="$(__open_file "${@}")" ;;
    i* ) _open_url="$(__open_issue "${@}")" ;;
    p* ) _open_url="$(__open_pull "${@}")" ;;
    *  ) __error "unknown sub-command '${_open_type}'" ;;
  esac

  if [ "${_open_print}" = "true" ]; then
    echo "${_open_url}"
  else
    open "${_open_url}"
  fi
}

# Usage: __open_file PATH [ LINE ]
__open_file() {
  if [ "${#}" -lt 1 ] || [ "${#}" -gt 2 ]; then
    __error "need one or two arguments, got ${#}"
  fi

  # We might not be in the repository we want to open so we have to go there.
  _open_file_tdir="$(dirname "${1}")"
  _open_file_rroot="$(git -C "${_open_file_tdir}" rev-parse --show-toplevel)/"
  _open_file_fpath="$(realpath "${1}")"
  _open_file_commit="$(git -C "${_open_file_tdir}" rev-parse HEAD)"

  _open_file_url="$(__remote_url "${_open_file_tdir}")/blob/${_open_file_commit}/${_open_file_fpath##"${_open_file_rroot}"}"
  if [ "${#}" -eq 2 ]; then
    _open_file_url="${_open_file_url}#L${2}"
  fi

  echo "${_open_file_url}"
}

# Usage: __open_issue [ ID ]
__open_issue() {
  if [ "${#}" -eq 0 ]; then
    echo "$(__remote_url)/issues"
  elif [ "${#}" -eq 1 ]; then
    echo "$(__remote_url)/issues/${1}"
  else
    __error "exceess arguments"
  fi
}

# Usage: __open_pull [ ID ]
__open_pull() {
  if [ "${#}" -eq 0 ]; then
    echo "$(__remote_url)/pulls"
  elif [ "${#}" -eq 1 ]; then
  # /issues/$id will redirect to pull requests as well
    echo "$(__remote_url)/pull/${1}"
  else
    __error "exceess arguments"
  fi
}

# Usage: __pr [ -s | --switch ] ID
__pr() {
  _pr_switch=
  while :; do
    case "${1}" in
      -s | --switch ) _pr_switch="true" ;;
      -* )            __error "unknown flag '${1}'" ;;
      * )             break ;;
    esac
    __shift
  done

  if [ "${#}" -eq 0 ]; then
    __error "missing PR id"
  fi

  git fetch "${Force}" "$(__remote)" "pull/${1}/head:gh/pr-${1}"

  if [ "${_pr_switch}" = "true" ]; then
    git switch "gh/pr-${1}"
  fi
}

# Usage: __help COMMAND
__help() {
  case "${1}" in
    "" )
      echo "Usage: git-gh [ FLAGS ] COMMAND [ ARGS ]"
      echo
      echo "git-gh - make working with GitHub on the CLI a breeze."
      echo
      echo "Commands:"
      echo "  help"
      echo "  open"
      echo "  pr"
      echo
      echo "Flags:"
      echo "  -f --force   Enable force (default: disabled)."
      echo "  -r --remote  Select remote to resolve to (default: origin)."
      echo "  -v --verbose Enable debug logging using 'set -x' (default: disabled)."
      echo
      echo "Configuration:"
      echo "  gh.defaultRemote Default remote to resolve to (default: origin)."
      echo
      echo "Dependencies:"
      echo "  sed(1)"
      ;;
    "help" )
      echo "Usage: git-gh help [ help | open | pr ]"
      echo
      echo "Show help for git-gh and any of its commands."
      ;;
    "open" )
      echo "Usage: git-gh open [ FLAGS ]"
      echo "       git-gh open [ FLAGS ] { issue | pull } [ ID ]"
      echo "       git-gh open [ FLAGS ] file PATH [ LINE ]"
      echo
      echo "git-gh open [ FLAGS ]"
      echo "  Open the repository in the GitHub UI."
      echo
      echo "git-gh open [ FLAGS ] { issue | pull } [ ID ]"
      echo "  Open the issues / pull-requests tab of the repository or the specific issue /"
      echo "  pull-request when an ID is provided."
      echo
      echo "git-gh open [ FLAGS ] file PATH [ LINE ]"
      echo "  Open the file on GitHub, optionally on a specific line."
      echo
      echo "Flags:"
      echo "  -p --print Instead of calling open, print the resulting URL to stdout."
      echo
      echo "Bugs:"
      echo "This command only works on macOS as it relies on the open(1) command."
      ;;
    "pr" )
      echo "Usage: git-gh pr [ FLAGS ] ID"
      echo
      echo "Setup a local branch for the given pull request ID. The branch will be located"
      echo "at 'gh/pr-ID'."
      echo
      echo "Flags:"
      echo "  -s --switch Automatically switch to the created ref."
      ;;
    * ) __error "unknown command '${1}', try 'git gh help help'" ;;
  esac
}

__gh() {
  while :; do
    case "${1}" in
      -f | --force   ) Force="--force" ;;
      -r | --remote  ) Remote="${2}"; __shift ;;
      -v | --verbose ) set -x ;;
      -* )             __error "unknown flag '${1}'" ;;
      *  )             break ;;
    esac
    __shift
  done

  _cmd="${1:-help}"
  __shift
  case "${_cmd}" in
    help ) __help  "${@}" ;;
    open ) __open  "${@}" ;;
    pr   ) __pr    "${@}" ;;
    *    ) __error "unknown command '${_cmd}', try 'git gh help'" ;;
  esac
}

__gh "${@}"
