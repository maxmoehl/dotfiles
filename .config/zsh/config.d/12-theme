#!/usr/bin/env zsh

eval "$(dircolors ~/.config/dircolors)"

export BAT_THEME=ansi
export GLAMOUR_STYLE=light

# git info
autoload -Uz vcs_info
precmd_vcs_info() {
  vcs_info
}
precmd_functions+=( precmd_vcs_info )

zstyle ':vcs_info:*' enable git
# TODO: consider switching completely to this for displaying the path inside the repo
#       `man 1 zshcontrib` contains details on generating more than one output which allows for additional customization
zstyle ':vcs_info:git:*' formats '%b'

directory() {
  if git rev-parse --is-inside-work-tree &> /dev/null; then
    git_root=$(git rev-parse --show-toplevel)
    current_dir=$(pwd)
    rel_path=(${current_dir#"$git_root"})
    repo_name=(${git_root##*/})

    echo "%F{blue}$repo_name$rel_path%f"
  else
    echo "%F{blue}%0~%f"
  fi
}

# if the return status of the last run command is non-zero print the value
return_status() {
  echo "%(?.. %F{red}%?%f)"
}

# adds a host to the beginning of the shell if the shell is a ssh session
prompt_host() {
  if [[ -n "${SSH_CONNECTION}" ]]; then
    echo "%F{red}[$(hostname)]%f"
  fi
}

# adds the current shell level as a prefix
prompt_lvl() {
  LVL=$(( SHLVL - 1 ))
  if [[ "${LVL}" -gt 0 ]]; then
    echo "%F{red}[lvl=${LVL}]%f"
  fi
}

# display a dollar sign or hash according to the current user
prompt_symbol() {
  if [[ "$(id -u)" -eq 0 ]]; then
    echo "%F{blue}#%f"
  else
    echo "%F{blue}$%f"
  fi
}

prompt_prefix() {
  PREFIX="$(prompt_host)$(prompt_lvl)"
  if [[ -n "${PREFIX}" ]]; then
    echo "${PREFIX} "
  fi
}

# color codes the output from git_promt_info and git_prompt_status
# for more info check the variables below
prompt_git() {
  echo "%F{yellow}$(git_prompt_info)%f$(git_prompt_status)"
}

prompt_git_no_status() {
  if [[ -n "${vcs_info_msg_0_}" ]]; then
    echo " %F{yellow}${vcs_info_msg_0_}%f"
  fi
}

# put it all together, only the prompt symbol and a space on the left
PROMPT='$(prompt_prefix)$(prompt_symbol) '

# and information on the directory, git and the return status on the right
# currently the git status is disabled because it is slow as hell
# to re-enable this the two git config options als need to be unset
# RPROMPT='$(directory)$(prompt_git)$(return_status)'
RPROMPT='$(directory)$(prompt_git_no_status)$(return_status)'
